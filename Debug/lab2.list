
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005678  08005678  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012f18  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f28  20012f28  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012af4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002964  00000000  00000000  00032b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  00036538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e79  00000000  00000000  000374e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001392c  00000000  00000000  0005a359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d33ef  00000000  00000000  0006dc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141074  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e4  00000000  00000000  001410c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005560 	.word	0x08005560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005560 	.word	0x08005560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <TaskMonitor_App>:
	}
}
*/

void TaskMonitor_App(void *pvParameters)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t Monitortimer = 5000;
 80004ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80004f0:	60fb      	str	r3, [r7, #12]
	while(1){
		Taskmonitor();
 80004f2:	f003 ffe5 	bl	80044c0 <Taskmonitor>
		vTaskDelay(Monitortimer);
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f003 f88c 	bl	8003614 <vTaskDelay>
		Monitortimer += 1;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
		Taskmonitor();
 8000502:	e7f6      	b.n	80004f2 <TaskMonitor_App+0xe>

08000504 <Red_LED_APP>:
	}
}

void Red_LED_APP(void *pvParameters){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 800050c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000510:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin); // should modify macro of redLED
 8000512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <Red_LED_APP+0x28>)
 8000518:	f000 fe89 	bl	800122e <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 800051c:	68f8      	ldr	r0, [r7, #12]
 800051e:	f003 f879 	bl	8003614 <vTaskDelay>
		Redtimer += 1;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin); // should modify macro of redLED
 8000528:	e7f3      	b.n	8000512 <Red_LED_APP+0xe>
 800052a:	bf00      	nop
 800052c:	40020c00 	.word	0x40020c00

08000530 <Green_LED_APP>:
	}
}

void Green_LED_APP(void *pvParameters){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053c:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin); // should modify macro of greenLED
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <Green_LED_APP+0x28>)
 8000544:	f000 fe73 	bl	800122e <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f003 f863 	bl	8003614 <vTaskDelay>
		Greentimer += 1;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3301      	adds	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin); // should modify macro of greenLED
 8000554:	e7f3      	b.n	800053e <Green_LED_APP+0xe>
 8000556:	bf00      	nop
 8000558:	40020c00 	.word	0x40020c00

0800055c <Delay_APP>:
	}
}

void Delay_APP(void *pvParameters){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	int delayflag = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag == 0){
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d105      	bne.n	800057a <Delay_APP+0x1e>
			delaytime = 15000;
 800056e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000572:	60bb      	str	r3, [r7, #8]
			delayflag = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e002      	b.n	8000580 <Delay_APP+0x24>
		}
		else {
			delaytime = 0xFFFFFFFF;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 8000580:	68b8      	ldr	r0, [r7, #8]
 8000582:	f003 f847 	bl	8003614 <vTaskDelay>
		if(delayflag == 0){
 8000586:	e7ef      	b.n	8000568 <Delay_APP+0xc>

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fb75 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f843 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8d5 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f8a9 	bl	80006f0 <MX_USART2_UART_Init>
		  128,
		  NULL,
		  1,
		  &xHandle);
	*/
	xTaskCreate(
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x70>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0x74>)
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x78>)
 80005ae:	f002 fef3 	bl	8003398 <xTaskCreate>
		  "Red_LED_APP",
		  128,
		  NULL,
		  1,
		  &xHandle);
	xTaskCreate(
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <main+0x70>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	4911      	ldr	r1, [pc, #68]	; (8000604 <main+0x7c>)
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0x80>)
 80005c2:	f002 fee9 	bl	8003398 <xTaskCreate>
		  "Green_LED_APP",
		  128,
		  NULL,
		  1,
		  &xHandle);
	xTaskCreate(
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x70>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <main+0x84>)
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0x88>)
 80005d8:	f002 fede 	bl	8003398 <xTaskCreate>
		  "TaskMonitor",
		  512,
		  NULL,
		  2,
		  &xHandle);
	xTaskCreate(
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <main+0x70>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	230e      	movs	r3, #14
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <main+0x8c>)
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <main+0x90>)
 80005ec:	f002 fed4 	bl	8003398 <xTaskCreate>
		  128,
		  NULL,
		  14,
		  &xHandle);

  vTaskStartScheduler();
 80005f0:	f003 f844 	bl	800367c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x6c>
 80005f6:	bf00      	nop
 80005f8:	20000070 	.word	0x20000070
 80005fc:	08005578 	.word	0x08005578
 8000600:	08000505 	.word	0x08000505
 8000604:	08005584 	.word	0x08005584
 8000608:	08000531 	.word	0x08000531
 800060c:	08005594 	.word	0x08005594
 8000610:	080004e5 	.word	0x080004e5
 8000614:	080055a0 	.word	0x080055a0
 8000618:	0800055d 	.word	0x0800055d

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 ff80 	bl	8005530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000690:	2332      	movs	r3, #50	; 0x32
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fddf 	bl	8001264 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9ba 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f840 	bl	8001754 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f9a3 	bl	8000a24 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fd14 	bl	8002154 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f977 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba2      	ldr	r3, [pc, #648]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4aa1      	ldr	r2, [pc, #644]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b9f      	ldr	r3, [pc, #636]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9b      	ldr	r3, [pc, #620]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a9a      	ldr	r2, [pc, #616]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b98      	ldr	r3, [pc, #608]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b91      	ldr	r3, [pc, #580]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b8d      	ldr	r3, [pc, #564]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a8c      	ldr	r2, [pc, #560]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b8a      	ldr	r3, [pc, #552]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b86      	ldr	r3, [pc, #536]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a85      	ldr	r2, [pc, #532]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b83      	ldr	r3, [pc, #524]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b7f      	ldr	r3, [pc, #508]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a7e      	ldr	r2, [pc, #504]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b7c      	ldr	r3, [pc, #496]	; (80009e8 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	4879      	ldr	r0, [pc, #484]	; (80009ec <MX_GPIO_Init+0x2a8>)
 8000808:	f000 fcf8 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	4877      	ldr	r0, [pc, #476]	; (80009f0 <MX_GPIO_Init+0x2ac>)
 8000812:	f000 fcf3 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000816:	2200      	movs	r2, #0
 8000818:	f24f 0110 	movw	r1, #61456	; 0xf010
 800081c:	4875      	ldr	r0, [pc, #468]	; (80009f4 <MX_GPIO_Init+0x2b0>)
 800081e:	f000 fced 	bl	80011fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	486c      	ldr	r0, [pc, #432]	; (80009ec <MX_GPIO_Init+0x2a8>)
 800083a:	f000 fb43 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4866      	ldr	r0, [pc, #408]	; (80009f0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb35 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800085a:	2308      	movs	r3, #8
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086a:	2305      	movs	r3, #5
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	485e      	ldr	r0, [pc, #376]	; (80009f0 <MX_GPIO_Init+0x2ac>)
 8000876:	f000 fb25 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	485a      	ldr	r0, [pc, #360]	; (80009f8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb18 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000894:	2310      	movs	r3, #16
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a4:	2306      	movs	r3, #6
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4852      	ldr	r0, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb08 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b4:	23e0      	movs	r3, #224	; 0xe0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c4:	2305      	movs	r3, #5
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	484a      	ldr	r0, [pc, #296]	; (80009f8 <MX_GPIO_Init+0x2b4>)
 80008d0:	f000 faf8 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4845      	ldr	r0, [pc, #276]	; (80009fc <MX_GPIO_Init+0x2b8>)
 80008e8:	f000 faec 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <MX_GPIO_Init+0x2b8>)
 800090a:	f000 fadb 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000912:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4833      	ldr	r0, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x2b0>)
 8000928:	f000 facc 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800092c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093e:	2306      	movs	r3, #6
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <MX_GPIO_Init+0x2ac>)
 800094a:	f000 fabb 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <MX_GPIO_Init+0x2b4>)
 8000964:	f000 faae 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000968:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097a:	230a      	movs	r3, #10
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	; (80009f8 <MX_GPIO_Init+0x2b4>)
 8000986:	f000 fa9d 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <MX_GPIO_Init+0x2b0>)
 800099e:	f000 fa91 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_GPIO_Init+0x2b8>)
 80009c0:	f000 fa80 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x2a8>)
 80009da:	f000 fa73 	bl	8000ec4 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 f955 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001400 	.word	0x40001400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <HAL_UART_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12b      	bne.n	8000afa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_UART_MspInit+0x8c>)
 8000af6:	f000 f9e5 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2037      	movs	r0, #55	; 0x37
 8000b26:	f000 f9a3 	bl	8000e70 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b2a:	2037      	movs	r0, #55	; 0x37
 8000b2c:	f000 f9bc 	bl	8000ea8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f81c 	bl	8001b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b5c:	f000 fff2 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0xac>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0xb0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_InitTick+0xac>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0xac>)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_InitTick+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_InitTick+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_InitTick+0xac>)
 8000b96:	f001 f82f 	bl	8001bf8 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_InitTick+0xac>)
 8000ba2:	f001 f883 	bl	8001cac <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	20000074 	.word	0x20000074
 8000bc0:	40001400 	.word	0x40001400

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM7_IRQHandler+0x10>)
 8000bf6:	f001 f8c9 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000074 	.word	0x20000074

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 fc39 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc95 	bl	8000588 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c6c:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 8000c70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c74:	20012f28 	.word	0x20012f28

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8d8 	bl	8000e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff30 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff febe 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200000bc 	.word	0x200000bc

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000bc 	.word	0x200000bc

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff4c 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e82:	f7ff ff61 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f7ff ffb1 	bl	8000df4 <NVIC_EncodePriority>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff80 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff54 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e16b      	b.n	80011b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 815a 	bne.w	80011b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b4 	beq.w	80011b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b5d      	ldr	r3, [pc, #372]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a5b      	ldr	r2, [pc, #364]	; (80011d4 <HAL_GPIO_Init+0x310>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <HAL_GPIO_Init+0x314>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_GPIO_Init+0x318>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <HAL_GPIO_Init+0x31c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x320>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x324>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x328>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x330>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x20a>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x310>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_GPIO_Init+0x334>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_GPIO_Init+0x334>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_GPIO_Init+0x334>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f ae90 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40021c00 	.word	0x40021c00
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43d9      	mvns	r1, r3
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e267      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d075      	beq.n	800136e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d00c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	2b08      	cmp	r3, #8
 8001298:	d112      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a6:	d10b      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d05b      	beq.n	800136c <HAL_RCC_OscConfig+0x108>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d157      	bne.n	800136c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e242      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d106      	bne.n	80012d8 <HAL_RCC_OscConfig+0x74>
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a75      	ldr	r2, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e01d      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x98>
 80012e2:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0xb0>
 80012fc:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a68      	ldr	r2, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fce4 	bl	8000ce8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fce0 	bl	8000ce8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e207      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0xc0>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcd0 	bl	8000ce8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fccc 	bl	8000ce8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1f3      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0xe8>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1c7      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e03a      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x244>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fc85 	bl	8000ce8 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc81 	bl	8000ce8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a8      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4925      	ldr	r1, [pc, #148]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x244>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc64 	bl	8000ce8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fc60 	bl	8000ce8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e187      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d036      	beq.n	80014bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d016      	beq.n	8001484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_RCC_OscConfig+0x248>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fc44 	bl	8000ce8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fc40 	bl	8000ce8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e167      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x240>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x200>
 8001482:	e01b      	b.n	80014bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x248>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fc2d 	bl	8000ce8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	e00e      	b.n	80014b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fc29 	bl	8000ce8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d907      	bls.n	80014b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e150      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
 80014a4:	40023800 	.word	0x40023800
 80014a8:	42470000 	.word	0x42470000
 80014ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ea      	bne.n	8001492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8097 	beq.w	80015f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a7c      	ldr	r2, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff fbe9 	bl	8000ce8 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff fbe5 	bl	8000ce8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e10c      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x474>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x2ea>
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	e01c      	b.n	8001588 <HAL_RCC_OscConfig+0x324>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x30c>
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0x324>
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a57      	ldr	r2, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d015      	beq.n	80015bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fbaa 	bl	8000ce8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fba6 	bl	8000ce8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0cb      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ee      	beq.n	8001598 <HAL_RCC_OscConfig+0x334>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb94 	bl	8000ce8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb90 	bl	8000ce8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0b5      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ee      	bne.n	80015c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a1 	beq.w	8001744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b08      	cmp	r3, #8
 800160c:	d05c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d141      	bne.n	800169a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb64 	bl	8000ce8 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fb60 	bl	8000ce8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e087      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	3b01      	subs	r3, #1
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	491b      	ldr	r1, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fb39 	bl	8000ce8 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fb35 	bl	8000ce8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e05c      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x416>
 8001698:	e054      	b.n	8001744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb22 	bl	8000ce8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb1e 	bl	8000ce8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e045      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x444>
 80016c6:	e03d      	b.n	8001744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e038      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000
 80016dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d028      	beq.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d121      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d11a      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001718:	4293      	cmp	r3, r2
 800171a:	d111      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	3b01      	subs	r3, #1
 800172a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0cc      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d90c      	bls.n	8001790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b8      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	494d      	ldr	r1, [pc, #308]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d044      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	2b03      	cmp	r3, #3
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e067      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4934      	ldr	r1, [pc, #208]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff fa50 	bl	8000ce8 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff fa4c 	bl	8000ce8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d20c      	bcs.n	800189c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e032      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4916      	ldr	r1, [pc, #88]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018da:	f000 f821 	bl	8001920 <HAL_RCC_GetSysClockFreq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	490a      	ldr	r1, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	5ccb      	ldrb	r3, [r1, r3]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f908 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00
 8001910:	40023800 	.word	0x40023800
 8001914:	08005658 	.word	0x08005658
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001924:	b094      	sub	sp, #80	; 0x50
 8001926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001930:	2300      	movs	r3, #0
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d00d      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x40>
 8001944:	2b08      	cmp	r3, #8
 8001946:	f200 80e1 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x34>
 800194e:	2b04      	cmp	r3, #4
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x3a>
 8001952:	e0db      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001958:	e0db      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195e:	e0d8      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	2200      	movs	r2, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
 800198e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001992:	4622      	mov	r2, r4
 8001994:	462b      	mov	r3, r5
 8001996:	f04f 0000 	mov.w	r0, #0
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	0159      	lsls	r1, r3, #5
 80019a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a4:	0150      	lsls	r0, r2, #5
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4621      	mov	r1, r4
 80019ac:	1a51      	subs	r1, r2, r1
 80019ae:	6139      	str	r1, [r7, #16]
 80019b0:	4629      	mov	r1, r5
 80019b2:	eb63 0301 	sbc.w	r3, r3, r1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c4:	4659      	mov	r1, fp
 80019c6:	018b      	lsls	r3, r1, #6
 80019c8:	4651      	mov	r1, sl
 80019ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ce:	4651      	mov	r1, sl
 80019d0:	018a      	lsls	r2, r1, #6
 80019d2:	4651      	mov	r1, sl
 80019d4:	ebb2 0801 	subs.w	r8, r2, r1
 80019d8:	4659      	mov	r1, fp
 80019da:	eb63 0901 	sbc.w	r9, r3, r1
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f2:	4690      	mov	r8, r2
 80019f4:	4699      	mov	r9, r3
 80019f6:	4623      	mov	r3, r4
 80019f8:	eb18 0303 	adds.w	r3, r8, r3
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	462b      	mov	r3, r5
 8001a00:	eb49 0303 	adc.w	r3, r9, r3
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a12:	4629      	mov	r1, r5
 8001a14:	024b      	lsls	r3, r1, #9
 8001a16:	4621      	mov	r1, r4
 8001a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	024a      	lsls	r2, r1, #9
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a26:	2200      	movs	r2, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a30:	f7fe fbd6 	bl	80001e0 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a3c:	e058      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	4611      	mov	r1, r2
 8001a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a58:	4642      	mov	r2, r8
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0159      	lsls	r1, r3, #5
 8001a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6a:	0150      	lsls	r0, r2, #5
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4641      	mov	r1, r8
 8001a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a90:	ebb2 040a 	subs.w	r4, r2, sl
 8001a94:	eb63 050b 	sbc.w	r5, r3, fp
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	00eb      	lsls	r3, r5, #3
 8001aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa6:	00e2      	lsls	r2, r4, #3
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	4643      	mov	r3, r8
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	028b      	lsls	r3, r1, #10
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	028a      	lsls	r2, r1, #10
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	61fa      	str	r2, [r7, #28]
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fb7c 	bl	80001e0 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3750      	adds	r7, #80	; 0x50
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08005668 	.word	0x08005668

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffdc 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08005668 	.word	0x08005668

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9d8 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04e      	b.n	8001d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d022      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d01d      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d018      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40010400 	.word	0x40010400
 8001d84:	40014000 	.word	0x40014000
 8001d88:	40001800 	.word	0x40001800

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8ee 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8e0 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8f1 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0204 	mvn.w	r2, #4
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c4 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8b6 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8c7 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0208 	mvn.w	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f89a 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f88c 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f89d 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f870 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f862 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f873 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0201 	mvn.w	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fd78 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f902 	bl	8002140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f838 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8cc 	bl	800212c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <TIM_Base_SetConfig+0x124>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_Base_SetConfig+0x128>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_Base_SetConfig+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <TIM_Base_SetConfig+0x13c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <TIM_Base_SetConfig+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40010000 	.word	0x40010000
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40010400 	.word	0x40010400
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	40001800 	.word	0x40001800
 8002124:	40001c00 	.word	0x40001c00
 8002128:	40002000 	.word	0x40002000

0800212c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fc80 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f929 	bl	80023f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d17c      	bne.n	8002308 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_UART_Transmit+0x2c>
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e075      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_UART_Transmit+0x3e>
 8002228:	2302      	movs	r3, #2
 800222a:	e06e      	b.n	800230a <HAL_UART_Transmit+0x11c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2221      	movs	r2, #33	; 0x21
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002242:	f7fe fd51 	bl	8000ce8 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d108      	bne.n	8002270 <HAL_UART_Transmit+0x82>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e003      	b.n	8002278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002280:	e02a      	b.n	80022d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f840 	bl	8002312 <UART_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e036      	b.n	800230a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3302      	adds	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e007      	b.n	80022ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1cf      	bne.n	8002282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f810 	bl	8002312 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e006      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b090      	sub	sp, #64	; 0x40
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002322:	e050      	b.n	80023c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d04c      	beq.n	80023c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0x30>
 8002332:	f7fe fcd9 	bl	8000ce8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800233e:	429a      	cmp	r2, r3
 8002340:	d241      	bcs.n	80023c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002362:	637a      	str	r2, [r7, #52]	; 0x34
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e5      	bne.n	8002342 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	613b      	str	r3, [r7, #16]
   return(result);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3314      	adds	r3, #20
 8002394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002396:	623a      	str	r2, [r7, #32]
 8002398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e00f      	b.n	80023e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d09f      	beq.n	8002324 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3740      	adds	r7, #64	; 0x40
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b0c0      	sub	sp, #256	; 0x100
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	ea40 0301 	orr.w	r3, r0, r1
 8002418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	431a      	orrs	r2, r3
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002448:	f021 010c 	bic.w	r1, r1, #12
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002456:	430b      	orrs	r3, r1
 8002458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	6999      	ldr	r1, [r3, #24]
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	ea40 0301 	orr.w	r3, r0, r1
 8002476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b8f      	ldr	r3, [pc, #572]	; (80026bc <UART_SetConfig+0x2cc>)
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <UART_SetConfig+0xa0>
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <UART_SetConfig+0x2d0>)
 800248c:	429a      	cmp	r2, r3
 800248e:	d104      	bne.n	800249a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002490:	f7ff fb6c 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8002494:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002498:	e003      	b.n	80024a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fb53 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 800249e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ac:	f040 810c 	bne.w	80026c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	1891      	adds	r1, r2, r2
 80024c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80024ca:	415b      	adcs	r3, r3
 80024cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024d2:	4621      	mov	r1, r4
 80024d4:	eb12 0801 	adds.w	r8, r2, r1
 80024d8:	4629      	mov	r1, r5
 80024da:	eb43 0901 	adc.w	r9, r3, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f2:	4690      	mov	r8, r2
 80024f4:	4699      	mov	r9, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	eb18 0303 	adds.w	r3, r8, r3
 80024fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002500:	462b      	mov	r3, r5
 8002502:	eb49 0303 	adc.w	r3, r9, r3
 8002506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002516:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800251a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800251e:	460b      	mov	r3, r1
 8002520:	18db      	adds	r3, r3, r3
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
 8002524:	4613      	mov	r3, r2
 8002526:	eb42 0303 	adc.w	r3, r2, r3
 800252a:	657b      	str	r3, [r7, #84]	; 0x54
 800252c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002534:	f7fd fe54 	bl	80001e0 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <UART_SetConfig+0x2d4>)
 800253e:	fba3 2302 	umull	r2, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	011c      	lsls	r4, r3, #4
 8002546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002550:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	1891      	adds	r1, r2, r2
 800255e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002560:	415b      	adcs	r3, r3
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002568:	4641      	mov	r1, r8
 800256a:	eb12 0a01 	adds.w	sl, r2, r1
 800256e:	4649      	mov	r1, r9
 8002570:	eb43 0b01 	adc.w	fp, r3, r1
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002588:	4692      	mov	sl, r2
 800258a:	469b      	mov	fp, r3
 800258c:	4643      	mov	r3, r8
 800258e:	eb1a 0303 	adds.w	r3, sl, r3
 8002592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002596:	464b      	mov	r3, r9
 8002598:	eb4b 0303 	adc.w	r3, fp, r3
 800259c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025b4:	460b      	mov	r3, r1
 80025b6:	18db      	adds	r3, r3, r3
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
 80025ba:	4613      	mov	r3, r2
 80025bc:	eb42 0303 	adc.w	r3, r2, r3
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ca:	f7fd fe09 	bl	80001e0 <__aeabi_uldivmod>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <UART_SetConfig+0x2d4>)
 80025d6:	fba3 2301 	umull	r2, r3, r3, r1
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2264      	movs	r2, #100	; 0x64
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	1acb      	subs	r3, r1, r3
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <UART_SetConfig+0x2d4>)
 80025ec:	fba3 2302 	umull	r2, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f8:	441c      	add	r4, r3
 80025fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002604:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800260c:	4642      	mov	r2, r8
 800260e:	464b      	mov	r3, r9
 8002610:	1891      	adds	r1, r2, r2
 8002612:	63b9      	str	r1, [r7, #56]	; 0x38
 8002614:	415b      	adcs	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800261c:	4641      	mov	r1, r8
 800261e:	1851      	adds	r1, r2, r1
 8002620:	6339      	str	r1, [r7, #48]	; 0x30
 8002622:	4649      	mov	r1, r9
 8002624:	414b      	adcs	r3, r1
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002634:	4659      	mov	r1, fp
 8002636:	00cb      	lsls	r3, r1, #3
 8002638:	4651      	mov	r1, sl
 800263a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263e:	4651      	mov	r1, sl
 8002640:	00ca      	lsls	r2, r1, #3
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	4603      	mov	r3, r0
 8002648:	4642      	mov	r2, r8
 800264a:	189b      	adds	r3, r3, r2
 800264c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002650:	464b      	mov	r3, r9
 8002652:	460a      	mov	r2, r1
 8002654:	eb42 0303 	adc.w	r3, r2, r3
 8002658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002668:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800266c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002670:	460b      	mov	r3, r1
 8002672:	18db      	adds	r3, r3, r3
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 8002676:	4613      	mov	r3, r2
 8002678:	eb42 0303 	adc.w	r3, r2, r3
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002686:	f7fd fdab 	bl	80001e0 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <UART_SetConfig+0x2d4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <UART_SetConfig+0x2d4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 0207 	and.w	r2, r3, #7
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4422      	add	r2, r4
 80026b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b8:	e105      	b.n	80028c6 <UART_SetConfig+0x4d6>
 80026ba:	bf00      	nop
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026da:	4642      	mov	r2, r8
 80026dc:	464b      	mov	r3, r9
 80026de:	1891      	adds	r1, r2, r2
 80026e0:	6239      	str	r1, [r7, #32]
 80026e2:	415b      	adcs	r3, r3
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ea:	4641      	mov	r1, r8
 80026ec:	1854      	adds	r4, r2, r1
 80026ee:	4649      	mov	r1, r9
 80026f0:	eb43 0501 	adc.w	r5, r3, r1
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002710:	464b      	mov	r3, r9
 8002712:	eb45 0303 	adc.w	r3, r5, r3
 8002716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002736:	4629      	mov	r1, r5
 8002738:	008b      	lsls	r3, r1, #2
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002740:	4621      	mov	r1, r4
 8002742:	008a      	lsls	r2, r1, #2
 8002744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002748:	f7fd fd4a 	bl	80001e0 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <UART_SetConfig+0x4e4>)
 8002752:	fba3 2302 	umull	r2, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	011c      	lsls	r4, r3, #4
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	61b9      	str	r1, [r7, #24]
 8002774:	415b      	adcs	r3, r3
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6139      	str	r1, [r7, #16]
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80027c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027d4:	4649      	mov	r1, r9
 80027d6:	008b      	lsls	r3, r1, #2
 80027d8:	4641      	mov	r1, r8
 80027da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027de:	4641      	mov	r1, r8
 80027e0:	008a      	lsls	r2, r1, #2
 80027e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027e6:	f7fd fcfb 	bl	80001e0 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <UART_SetConfig+0x4e4>)
 80027f0:	fba3 1302 	umull	r1, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	2164      	movs	r1, #100	; 0x64
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	3332      	adds	r3, #50	; 0x32
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <UART_SetConfig+0x4e4>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	441c      	add	r4, r3
 8002810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002814:	2200      	movs	r2, #0
 8002816:	673b      	str	r3, [r7, #112]	; 0x70
 8002818:	677a      	str	r2, [r7, #116]	; 0x74
 800281a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800281e:	4642      	mov	r2, r8
 8002820:	464b      	mov	r3, r9
 8002822:	1891      	adds	r1, r2, r2
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	415b      	adcs	r3, r3
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800282e:	4641      	mov	r1, r8
 8002830:	1851      	adds	r1, r2, r1
 8002832:	6039      	str	r1, [r7, #0]
 8002834:	4649      	mov	r1, r9
 8002836:	414b      	adcs	r3, r1
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002846:	4659      	mov	r1, fp
 8002848:	00cb      	lsls	r3, r1, #3
 800284a:	4651      	mov	r1, sl
 800284c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002850:	4651      	mov	r1, sl
 8002852:	00ca      	lsls	r2, r1, #3
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	4603      	mov	r3, r0
 800285a:	4642      	mov	r2, r8
 800285c:	189b      	adds	r3, r3, r2
 800285e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002860:	464b      	mov	r3, r9
 8002862:	460a      	mov	r2, r1
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	663b      	str	r3, [r7, #96]	; 0x60
 8002874:	667a      	str	r2, [r7, #100]	; 0x64
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002882:	4649      	mov	r1, r9
 8002884:	008b      	lsls	r3, r1, #2
 8002886:	4641      	mov	r1, r8
 8002888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288c:	4641      	mov	r1, r8
 800288e:	008a      	lsls	r2, r1, #2
 8002890:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002894:	f7fd fca4 	bl	80001e0 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <UART_SetConfig+0x4e4>)
 800289e:	fba3 1302 	umull	r1, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2164      	movs	r1, #100	; 0x64
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <UART_SetConfig+0x4e4>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 020f 	and.w	r2, r3, #15
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4422      	add	r2, r4
 80028c4:	609a      	str	r2, [r3, #8]
}
 80028c6:	bf00      	nop
 80028c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	51eb851f 	.word	0x51eb851f

080028d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0208 	add.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f103 0208 	add.w	r2, r3, #8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d103      	bne.n	800299a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e00c      	b.n	80029b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3308      	adds	r3, #8
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e002      	b.n	80029a8 <vListInsert+0x2e>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d2f6      	bcs.n	80029a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6892      	ldr	r2, [r2, #8]
 8002a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6852      	ldr	r2, [r2, #4]
 8002a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d103      	bne.n	8002a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1e5a      	subs	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a6a:	f002 fa33 	bl	8004ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	68f9      	ldr	r1, [r7, #12]
 8002a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d114      	bne.n	8002aea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01a      	beq.n	8002afe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3310      	adds	r3, #16
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f841 	bl	8003b54 <xTaskRemoveFromEventList>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <xQueueGenericReset+0xcc>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	e009      	b.n	8002afe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3310      	adds	r3, #16
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fef2 	bl	80028d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3324      	adds	r3, #36	; 0x24
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff feed 	bl	80028d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002afe:	f002 fa19 	bl	8004f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	613b      	str	r3, [r7, #16]
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	e004      	b.n	8002b50 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3350      	adds	r3, #80	; 0x50
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 fadf 	bl	8005118 <pvPortMalloc>
 8002b5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3350      	adds	r3, #80	; 0x50
 8002b6a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f805 	bl	8002b88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e002      	b.n	8002baa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	69b8      	ldr	r0, [r7, #24]
 8002bba:	f7ff ff41 	bl	8002a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bde:	2300      	movs	r3, #0
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueGenericSend+0x32>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <xQueueGenericSend+0x40>
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <xQueueGenericSend+0x44>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <xQueueGenericSend+0x46>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <xQueueGenericSend+0x60>
	__asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c2c:	bf00      	nop
 8002c2e:	e7fe      	b.n	8002c2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x6e>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <xQueueGenericSend+0x72>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <xQueueGenericSend+0x74>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xQueueGenericSend+0x8e>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	623b      	str	r3, [r7, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c5e:	f001 f915 	bl	8003e8c <xTaskGetSchedulerState>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <xQueueGenericSend+0x9e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <xQueueGenericSend+0xa2>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericSend+0xa4>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericSend+0xbe>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	61fb      	str	r3, [r7, #28]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c8e:	f002 f921 	bl	8004ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <xQueueGenericSend+0xd4>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d129      	bne.n	8002cf8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002caa:	f000 fa07 	bl	80030bc <prvCopyDataToQueue>
 8002cae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	3324      	adds	r3, #36	; 0x24
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 ff49 	bl	8003b54 <xTaskRemoveFromEventList>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <xQueueGenericSend+0x1f8>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	e00a      	b.n	8002cf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <xQueueGenericSend+0x1f8>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cf0:	f002 f920 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e063      	b.n	8002dc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cfe:	f002 f919 	bl	8004f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e05c      	b.n	8002dc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 ff81 	bl	8003c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d1a:	f002 f90b 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d1e:	f000 fcfb 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d22:	f002 f8d7 	bl	8004ed4 <vPortEnterCritical>
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d103      	bne.n	8002d3c <xQueueGenericSend+0x16c>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d103      	bne.n	8002d52 <xQueueGenericSend+0x182>
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d52:	f002 f8ef 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d56:	1d3a      	adds	r2, r7, #4
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 ff70 	bl	8003c44 <xTaskCheckForTimeOut>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d124      	bne.n	8002db4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6c:	f000 fa9e 	bl	80032ac <prvIsQueueFull>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d018      	beq.n	8002da8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	3310      	adds	r3, #16
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fe98 	bl	8003ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d86:	f000 fa29 	bl	80031dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d8a:	f000 fcd3 	bl	8003734 <xTaskResumeAll>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af7c 	bne.w	8002c8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <xQueueGenericSend+0x1f8>)
 8002d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	e772      	b.n	8002c8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002daa:	f000 fa17 	bl	80031dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dae:	f000 fcc1 	bl	8003734 <xTaskResumeAll>
 8002db2:	e76c      	b.n	8002c8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db6:	f000 fa11 	bl	80031dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dba:	f000 fcbb 	bl	8003734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3738      	adds	r7, #56	; 0x38
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <xQueueGenericSendFromISR+0x3c>
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <xQueueGenericSendFromISR+0x40>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <xQueueGenericSendFromISR+0x42>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	623b      	str	r3, [r7, #32]
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d103      	bne.n	8002e36 <xQueueGenericSendFromISR+0x6a>
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <xQueueGenericSendFromISR+0x6e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <xQueueGenericSendFromISR+0x70>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	61fb      	str	r3, [r7, #28]
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e56:	f002 f91f 	bl	8005098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	61ba      	str	r2, [r7, #24]
 8002e70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <xQueueGenericSendFromISR+0xbc>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d12c      	bne.n	8002ee2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e98:	f000 f910 	bl	80030bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d112      	bne.n	8002ecc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	3324      	adds	r3, #36	; 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fe4e 	bl	8003b54 <xTaskRemoveFromEventList>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e007      	b.n	8002edc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002edc:	2301      	movs	r3, #1
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ee0:	e001      	b.n	8002ee6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ef0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3738      	adds	r7, #56	; 0x38
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xQueueReceive+0x30>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	623b      	str	r3, [r7, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <xQueueReceive+0x3e>
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <xQueueReceive+0x42>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <xQueueReceive+0x44>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueReceive+0x5e>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61fb      	str	r3, [r7, #28]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5a:	f000 ff97 	bl	8003e8c <xTaskGetSchedulerState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <xQueueReceive+0x6e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueReceive+0x72>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueReceive+0x74>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueReceive+0x8e>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	61bb      	str	r3, [r7, #24]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8a:	f001 ffa3 	bl	8004ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01f      	beq.n	8002fda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 f8f7 	bl	8003190 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00f      	beq.n	8002fd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fdcc 	bl	8003b54 <xTaskRemoveFromEventList>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <xQueueReceive+0x1bc>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fd2:	f001 ffaf 	bl	8004f34 <vPortExitCritical>
				return pdPASS;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e069      	b.n	80030ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fe0:	f001 ffa8 	bl	8004f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e062      	b.n	80030ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fe10 	bl	8003c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ffc:	f001 ff9a 	bl	8004f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003000:	f000 fb8a 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003004:	f001 ff66 	bl	8004ed4 <vPortEnterCritical>
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800300e:	b25b      	sxtb	r3, r3
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d103      	bne.n	800301e <xQueueReceive+0x122>
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d103      	bne.n	8003034 <xQueueReceive+0x138>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003034:	f001 ff7e 	bl	8004f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003038:	1d3a      	adds	r2, r7, #4
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fdff 	bl	8003c44 <xTaskCheckForTimeOut>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d123      	bne.n	8003094 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304e:	f000 f917 	bl	8003280 <prvIsQueueEmpty>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fd27 	bl	8003ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003068:	f000 f8b8 	bl	80031dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800306c:	f000 fb62 	bl	8003734 <xTaskResumeAll>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d189      	bne.n	8002f8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <xQueueReceive+0x1bc>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e780      	b.n	8002f8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 f8a7 	bl	80031dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800308e:	f000 fb51 	bl	8003734 <xTaskResumeAll>
 8003092:	e77a      	b.n	8002f8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003096:	f000 f8a1 	bl	80031dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309a:	f000 fb4b 	bl	8003734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a0:	f000 f8ee 	bl	8003280 <prvIsQueueEmpty>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f43f af6f 	beq.w	8002f8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d14d      	bne.n	800317e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 feee 	bl	8003ec8 <xTaskPriorityDisinherit>
 80030ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e043      	b.n	800317e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d119      	bne.n	8003130 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6858      	ldr	r0, [r3, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	461a      	mov	r2, r3
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	f002 fa04 	bl	8005514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	441a      	add	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d32b      	bcc.n	800317e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e026      	b.n	800317e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68d8      	ldr	r0, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	461a      	mov	r2, r3
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	f002 f9ea 	bl	8005514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	425b      	negs	r3, r3
 800314a:	441a      	add	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	425b      	negs	r3, r3
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d105      	bne.n	800317e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3b01      	subs	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003186:	697b      	ldr	r3, [r7, #20]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d303      	bcc.n	80031c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68d9      	ldr	r1, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	461a      	mov	r2, r3
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	f002 f9a0 	bl	8005514 <memcpy>
	}
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031e4:	f001 fe76 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031f0:	e011      	b.n	8003216 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fca8 	bl	8003b54 <xTaskRemoveFromEventList>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800320a:	f000 fd7d 	bl	8003d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	3b01      	subs	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	dce9      	bgt.n	80031f2 <prvUnlockQueue+0x16>
 800321e:	e000      	b.n	8003222 <prvUnlockQueue+0x46>
					break;
 8003220:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800322a:	f001 fe83 	bl	8004f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800322e:	f001 fe51 	bl	8004ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003238:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800323a:	e011      	b.n	8003260 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3310      	adds	r3, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fc83 	bl	8003b54 <xTaskRemoveFromEventList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003254:	f000 fd58 	bl	8003d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	3b01      	subs	r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003264:	2b00      	cmp	r3, #0
 8003266:	dce9      	bgt.n	800323c <prvUnlockQueue+0x60>
 8003268:	e000      	b.n	800326c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800326a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	22ff      	movs	r2, #255	; 0xff
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003274:	f001 fe5e 	bl	8004f34 <vPortExitCritical>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003288:	f001 fe24 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003294:	2301      	movs	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e001      	b.n	800329e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800329e:	f001 fe49 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032b4:	f001 fe0e 	bl	8004ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d102      	bne.n	80032ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e001      	b.n	80032ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ce:	f001 fe31 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e014      	b.n	8003316 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <vQueueAddToRegistry+0x50>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <vQueueAddToRegistry+0x50>)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <vQueueAddToRegistry+0x50>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800330e:	e006      	b.n	800331e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b07      	cmp	r3, #7
 800331a:	d9e7      	bls.n	80032ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200000c0 	.word	0x200000c0

08003330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003340:	f001 fdc8 	bl	8004ed4 <vPortEnterCritical>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800334a:	b25b      	sxtb	r3, r3
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <vQueueWaitForMessageRestricted+0x2a>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003360:	b25b      	sxtb	r3, r3
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d103      	bne.n	8003370 <vQueueWaitForMessageRestricted+0x40>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003370:	f001 fde0 	bl	8004f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3324      	adds	r3, #36	; 0x24
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fbb9 	bl	8003afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff26 	bl	80031dc <prvUnlockQueue>
	}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	; 0x30
 800339c:	af04      	add	r7, sp, #16
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 feb3 	bl	8005118 <pvPortMalloc>
 80033b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033ba:	2058      	movs	r0, #88	; 0x58
 80033bc:	f001 feac 	bl	8005118 <pvPortMalloc>
 80033c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
 80033ce:	e005      	b.n	80033dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033d0:	6978      	ldr	r0, [r7, #20]
 80033d2:	f001 ff65 	bl	80052a0 <vPortFree>
 80033d6:	e001      	b.n	80033dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f80e 	bl	800341a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fe:	69f8      	ldr	r0, [r7, #28]
 8003400:	f000 f89a 	bl	8003538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003404:	2301      	movs	r3, #1
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e002      	b.n	8003410 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003410:	69bb      	ldr	r3, [r7, #24]
	}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	461a      	mov	r2, r3
 8003432:	21a5      	movs	r1, #165	; 0xa5
 8003434:	f002 f87c 	bl	8005530 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003442:	3b01      	subs	r3, #1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f023 0307 	bic.w	r3, r3, #7
 8003450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <prvInitialiseNewTask+0x58>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	617b      	str	r3, [r7, #20]
}
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01f      	beq.n	80034b8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e012      	b.n	80034a4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	7819      	ldrb	r1, [r3, #0]
 8003486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	3334      	adds	r3, #52	; 0x34
 800348e:	460a      	mov	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d9e9      	bls.n	800347e <prvInitialiseNewTask+0x64>
 80034aa:	e000      	b.n	80034ae <prvInitialiseNewTask+0x94>
			{
				break;
 80034ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034b6:	e003      	b.n	80034c0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b0e      	cmp	r3, #14
 80034c4:	d901      	bls.n	80034ca <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034c6:	230e      	movs	r3, #14
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fa19 	bl	8002918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	3318      	adds	r3, #24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fa14 	bl	8002918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	f1c3 020f 	rsb	r2, r3, #15
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	69b8      	ldr	r0, [r7, #24]
 800351a:	f001 fb9d 	bl	8004c58 <pxPortInitialiseStack>
 800351e:	4602      	mov	r2, r0
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003540:	f001 fcc8 	bl	8004ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003544:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <prvAddNewTaskToReadyList+0xc0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <prvAddNewTaskToReadyList+0xc0>)
 800354c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <prvAddNewTaskToReadyList+0xc4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <prvAddNewTaskToReadyList+0xc4>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <prvAddNewTaskToReadyList+0xc0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d110      	bne.n	8003586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003564:	f000 fbf4 	bl	8003d50 <prvInitialiseTaskLists>
 8003568:	e00d      	b.n	8003586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <prvAddNewTaskToReadyList+0xc8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <prvAddNewTaskToReadyList+0xc4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	429a      	cmp	r2, r3
 800357e:	d802      	bhi.n	8003586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <prvAddNewTaskToReadyList+0xc4>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <prvAddNewTaskToReadyList+0xcc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <prvAddNewTaskToReadyList+0xcc>)
 800358e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <prvAddNewTaskToReadyList+0xcc>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2201      	movs	r2, #1
 800359e:	409a      	lsls	r2, r3
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <prvAddNewTaskToReadyList+0xd0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <prvAddNewTaskToReadyList+0xd0>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <prvAddNewTaskToReadyList+0xd4>)
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7ff f9b6 	bl	8002932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035c6:	f001 fcb5 	bl	8004f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <prvAddNewTaskToReadyList+0xc8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <prvAddNewTaskToReadyList+0xc4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <prvAddNewTaskToReadyList+0xd8>)
 80035e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200002a0 	.word	0x200002a0
 80035fc:	20000100 	.word	0x20000100
 8003600:	200002ac 	.word	0x200002ac
 8003604:	200002bc 	.word	0x200002bc
 8003608:	200002a8 	.word	0x200002a8
 800360c:	20000104 	.word	0x20000104
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <vTaskDelay+0x60>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <vTaskDelay+0x30>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	60bb      	str	r3, [r7, #8]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003644:	f000 f868 	bl	8003718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003648:	2100      	movs	r1, #0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fcc2 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003650:	f000 f870 	bl	8003734 <xTaskResumeAll>
 8003654:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <vTaskDelay+0x64>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200002c8 	.word	0x200002c8
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <vTaskStartScheduler+0x84>)
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2300      	movs	r3, #0
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	2282      	movs	r2, #130	; 0x82
 800368e:	491d      	ldr	r1, [pc, #116]	; (8003704 <vTaskStartScheduler+0x88>)
 8003690:	481d      	ldr	r0, [pc, #116]	; (8003708 <vTaskStartScheduler+0x8c>)
 8003692:	f7ff fe81 	bl	8003398 <xTaskCreate>
 8003696:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800369e:	f000 ffc9 	bl	8004634 <xTimerCreateTimerTask>
 80036a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d116      	bne.n	80036d8 <vTaskStartScheduler+0x5c>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
}
 80036bc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <vTaskStartScheduler+0x90>)
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <vTaskStartScheduler+0x94>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <vTaskStartScheduler+0x98>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036d2:	f001 fb4d 	bl	8004d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036d6:	e00e      	b.n	80036f6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d10a      	bne.n	80036f6 <vTaskStartScheduler+0x7a>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	607b      	str	r3, [r7, #4]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <vTaskStartScheduler+0x78>
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200002c4 	.word	0x200002c4
 8003704:	080055ac 	.word	0x080055ac
 8003708:	08003d21 	.word	0x08003d21
 800370c:	200002c0 	.word	0x200002c0
 8003710:	200002ac 	.word	0x200002ac
 8003714:	200002a4 	.word	0x200002a4

08003718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vTaskSuspendAll+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a03      	ldr	r2, [pc, #12]	; (8003730 <vTaskSuspendAll+0x18>)
 8003724:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	200002c8 	.word	0x200002c8

08003734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <xTaskResumeAll+0x114>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <xTaskResumeAll+0x2c>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	603b      	str	r3, [r7, #0]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003760:	f001 fbb8 	bl	8004ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003764:	4b38      	ldr	r3, [pc, #224]	; (8003848 <xTaskResumeAll+0x114>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	4a37      	ldr	r2, [pc, #220]	; (8003848 <xTaskResumeAll+0x114>)
 800376c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <xTaskResumeAll+0x114>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d161      	bne.n	800383a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <xTaskResumeAll+0x118>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d05d      	beq.n	800383a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800377e:	e02e      	b.n	80037de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <xTaskResumeAll+0x11c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3318      	adds	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f92d 	bl	80029ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f928 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	2201      	movs	r2, #1
 80037a2:	409a      	lsls	r2, r3
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <xTaskResumeAll+0x120>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <xTaskResumeAll+0x120>)
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <xTaskResumeAll+0x124>)
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7ff f8b4 	bl	8002932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <xTaskResumeAll+0x128>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <xTaskResumeAll+0x12c>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <xTaskResumeAll+0x11c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cc      	bne.n	8003780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ec:	f000 fb2e 	bl	8003e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xTaskResumeAll+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037fc:	f000 f846 	bl	800388c <xTaskIncrementTick>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <xTaskResumeAll+0x12c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <xTaskResumeAll+0x130>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <xTaskResumeAll+0x12c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <xTaskResumeAll+0x134>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f001 fb7b 	bl	8004f34 <vPortExitCritical>

	return xAlreadyYielded;
 800383e:	68bb      	ldr	r3, [r7, #8]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	200002c8 	.word	0x200002c8
 800384c:	200002a0 	.word	0x200002a0
 8003850:	20000260 	.word	0x20000260
 8003854:	200002a8 	.word	0x200002a8
 8003858:	20000104 	.word	0x20000104
 800385c:	20000100 	.word	0x20000100
 8003860:	200002b4 	.word	0x200002b4
 8003864:	200002b0 	.word	0x200002b0
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <xTaskGetTickCount+0x1c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003878:	687b      	ldr	r3, [r7, #4]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	200002a4 	.word	0x200002a4

0800388c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003896:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <xTaskIncrementTick+0x144>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 8088 	bne.w	80039b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <xTaskIncrementTick+0x148>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038a8:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <xTaskIncrementTick+0x148>)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d120      	bne.n	80038f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <xTaskIncrementTick+0x14c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	603b      	str	r3, [r7, #0]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xTaskIncrementTick+0x46>
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <xTaskIncrementTick+0x14c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b40      	ldr	r3, [pc, #256]	; (80039dc <xTaskIncrementTick+0x150>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <xTaskIncrementTick+0x14c>)
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <xTaskIncrementTick+0x150>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <xTaskIncrementTick+0x154>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <xTaskIncrementTick+0x154>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	f000 faab 	bl	8003e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <xTaskIncrementTick+0x158>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d348      	bcc.n	8003992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <xTaskIncrementTick+0x14c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <xTaskIncrementTick+0x158>)
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	601a      	str	r2, [r3, #0]
					break;
 8003912:	e03e      	b.n	8003992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <xTaskIncrementTick+0x14c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d203      	bcs.n	8003934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <xTaskIncrementTick+0x158>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003932:	e02e      	b.n	8003992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3304      	adds	r3, #4
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f857 	bl	80029ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3318      	adds	r3, #24
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f84e 	bl	80029ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <xTaskIncrementTick+0x15c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <xTaskIncrementTick+0x15c>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <xTaskIncrementTick+0x160>)
 8003970:	441a      	add	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe ffda 	bl	8002932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <xTaskIncrementTick+0x164>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	429a      	cmp	r2, r3
 800398a:	d3b9      	bcc.n	8003900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003990:	e7b6      	b.n	8003900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <xTaskIncrementTick+0x164>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4914      	ldr	r1, [pc, #80]	; (80039ec <xTaskIncrementTick+0x160>)
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d907      	bls.n	80039ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e004      	b.n	80039ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <xTaskIncrementTick+0x168>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <xTaskIncrementTick+0x168>)
 80039b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <xTaskIncrementTick+0x16c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80039c2:	2301      	movs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039c6:	697b      	ldr	r3, [r7, #20]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200002c8 	.word	0x200002c8
 80039d4:	200002a4 	.word	0x200002a4
 80039d8:	20000258 	.word	0x20000258
 80039dc:	2000025c 	.word	0x2000025c
 80039e0:	200002b8 	.word	0x200002b8
 80039e4:	200002c0 	.word	0x200002c0
 80039e8:	200002a8 	.word	0x200002a8
 80039ec:	20000104 	.word	0x20000104
 80039f0:	20000100 	.word	0x20000100
 80039f4:	200002b0 	.word	0x200002b0
 80039f8:	200002b4 	.word	0x200002b4

080039fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <vTaskSwitchContext+0xa4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <vTaskSwitchContext+0xa8>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a10:	e03f      	b.n	8003a92 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <vTaskSwitchContext+0xa8>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <vTaskSwitchContext+0xac>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	f1c3 031f 	rsb	r3, r3, #31
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	491f      	ldr	r1, [pc, #124]	; (8003aac <vTaskSwitchContext+0xb0>)
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <vTaskSwitchContext+0x5a>
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <vTaskSwitchContext+0xb0>)
 8003a64:	4413      	add	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d104      	bne.n	8003a88 <vTaskSwitchContext+0x8c>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <vTaskSwitchContext+0xb4>)
 8003a90:	6013      	str	r3, [r2, #0]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200002c8 	.word	0x200002c8
 8003aa4:	200002b4 	.word	0x200002b4
 8003aa8:	200002a8 	.word	0x200002a8
 8003aac:	20000104 	.word	0x20000104
 8003ab0:	20000100 	.word	0x20000100

08003ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	60fb      	str	r3, [r7, #12]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <vTaskPlaceOnEventList+0x44>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe ff49 	bl	800297a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ae8:	2101      	movs	r1, #1
 8003aea:	6838      	ldr	r0, [r7, #0]
 8003aec:	f000 fa72 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000100 	.word	0x20000100

08003afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	617b      	str	r3, [r7, #20]
}
 8003b20:	bf00      	nop
 8003b22:	e7fe      	b.n	8003b22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7fe ff00 	bl	8002932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	68b8      	ldr	r0, [r7, #8]
 8003b42:	f000 fa47 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
	}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000100 	.word	0x20000100

08003b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60fb      	str	r3, [r7, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	3318      	adds	r3, #24
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe ff31 	bl	80029ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <xTaskRemoveFromEventList+0xac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d11c      	bne.n	8003bcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe ff28 	bl	80029ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <xTaskRemoveFromEventList+0xb0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <xTaskRemoveFromEventList+0xb0>)
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <xTaskRemoveFromEventList+0xb4>)
 8003bbc:	441a      	add	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe feb4 	bl	8002932 <vListInsertEnd>
 8003bca:	e005      	b.n	8003bd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	480e      	ldr	r0, [pc, #56]	; (8003c0c <xTaskRemoveFromEventList+0xb8>)
 8003bd4:	f7fe fead 	bl	8002932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <xTaskRemoveFromEventList+0xbc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d905      	bls.n	8003bf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <xTaskRemoveFromEventList+0xc0>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e001      	b.n	8003bf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	200002c8 	.word	0x200002c8
 8003c04:	200002a8 	.word	0x200002a8
 8003c08:	20000104 	.word	0x20000104
 8003c0c:	20000260 	.word	0x20000260
 8003c10:	20000100 	.word	0x20000100
 8003c14:	200002b4 	.word	0x200002b4

08003c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <vTaskInternalSetTimeOutState+0x24>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <vTaskInternalSetTimeOutState+0x28>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	605a      	str	r2, [r3, #4]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	200002b8 	.word	0x200002b8
 8003c40:	200002a4 	.word	0x200002a4

08003c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	613b      	str	r3, [r7, #16]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c86:	f001 f925 	bl	8004ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <xTaskCheckForTimeOut+0xbc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e023      	b.n	8003cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <xTaskCheckForTimeOut+0xc0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d007      	beq.n	8003cc6 <xTaskCheckForTimeOut+0x82>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	e015      	b.n	8003cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d20b      	bcs.n	8003ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff9b 	bl	8003c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e004      	b.n	8003cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 f91f 	bl	8004f34 <vPortExitCritical>

	return xReturn;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200002a4 	.word	0x200002a4
 8003d04:	200002b8 	.word	0x200002b8

08003d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <vTaskMissedYield+0x14>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	200002b4 	.word	0x200002b4

08003d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d28:	f000 f852 	bl	8003dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <prvIdleTask+0x28>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d9f9      	bls.n	8003d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <prvIdleTask+0x2c>)
 8003d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d44:	e7f0      	b.n	8003d28 <prvIdleTask+0x8>
 8003d46:	bf00      	nop
 8003d48:	20000104 	.word	0x20000104
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	e00c      	b.n	8003d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <prvInitialiseTaskLists+0x60>)
 8003d68:	4413      	add	r3, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fdb4 	bl	80028d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3301      	adds	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b0e      	cmp	r3, #14
 8003d7a:	d9ef      	bls.n	8003d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d7c:	480d      	ldr	r0, [pc, #52]	; (8003db4 <prvInitialiseTaskLists+0x64>)
 8003d7e:	f7fe fdab 	bl	80028d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d82:	480d      	ldr	r0, [pc, #52]	; (8003db8 <prvInitialiseTaskLists+0x68>)
 8003d84:	f7fe fda8 	bl	80028d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d88:	480c      	ldr	r0, [pc, #48]	; (8003dbc <prvInitialiseTaskLists+0x6c>)
 8003d8a:	f7fe fda5 	bl	80028d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d8e:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <prvInitialiseTaskLists+0x70>)
 8003d90:	f7fe fda2 	bl	80028d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <prvInitialiseTaskLists+0x74>)
 8003d96:	f7fe fd9f 	bl	80028d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <prvInitialiseTaskLists+0x78>)
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <prvInitialiseTaskLists+0x64>)
 8003d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <prvInitialiseTaskLists+0x7c>)
 8003da2:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <prvInitialiseTaskLists+0x68>)
 8003da4:	601a      	str	r2, [r3, #0]
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000104 	.word	0x20000104
 8003db4:	20000230 	.word	0x20000230
 8003db8:	20000244 	.word	0x20000244
 8003dbc:	20000260 	.word	0x20000260
 8003dc0:	20000274 	.word	0x20000274
 8003dc4:	2000028c 	.word	0x2000028c
 8003dc8:	20000258 	.word	0x20000258
 8003dcc:	2000025c 	.word	0x2000025c

08003dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd6:	e019      	b.n	8003e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dd8:	f001 f87c 	bl	8004ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <prvCheckTasksWaitingTermination+0x50>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fdff 	bl	80029ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <prvCheckTasksWaitingTermination+0x54>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <prvCheckTasksWaitingTermination+0x54>)
 8003df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <prvCheckTasksWaitingTermination+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <prvCheckTasksWaitingTermination+0x58>)
 8003e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e02:	f001 f897 	bl	8004f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f810 	bl	8003e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <prvCheckTasksWaitingTermination+0x58>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e1      	bne.n	8003dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000274 	.word	0x20000274
 8003e24:	200002a0 	.word	0x200002a0
 8003e28:	20000288 	.word	0x20000288

08003e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fa31 	bl	80052a0 <vPortFree>
			vPortFree( pxTCB );
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f001 fa2e 	bl	80052a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvResetNextTaskUnblockTime+0x38>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <prvResetNextTaskUnblockTime+0x3c>)
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e64:	e008      	b.n	8003e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <prvResetNextTaskUnblockTime+0x38>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <prvResetNextTaskUnblockTime+0x3c>)
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	20000258 	.word	0x20000258
 8003e88:	200002c0 	.word	0x200002c0

08003e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <xTaskGetSchedulerState+0x34>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	e008      	b.n	8003eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <xTaskGetSchedulerState+0x38>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	e001      	b.n	8003eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eb2:	687b      	ldr	r3, [r7, #4]
	}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	200002ac 	.word	0x200002ac
 8003ec4:	200002c8 	.word	0x200002c8

08003ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d06e      	beq.n	8003fbc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <xTaskPriorityDisinherit+0x100>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d00a      	beq.n	8003efe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	60bb      	str	r3, [r7, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d044      	beq.n	8003fbc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d140      	bne.n	8003fbc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fd54 	bl	80029ec <uxListRemove>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	491f      	ldr	r1, [pc, #124]	; (8003fcc <xTaskPriorityDisinherit+0x104>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <xTaskPriorityDisinherit+0xae>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2201      	movs	r2, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <xTaskPriorityDisinherit+0x108>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <xTaskPriorityDisinherit+0x108>)
 8003f74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f1c3 020f 	rsb	r2, r3, #15
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	2201      	movs	r2, #1
 8003f90:	409a      	lsls	r2, r3
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <xTaskPriorityDisinherit+0x108>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <xTaskPriorityDisinherit+0x108>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <xTaskPriorityDisinherit+0x104>)
 8003faa:	441a      	add	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe fcbd 	bl	8002932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fbc:	697b      	ldr	r3, [r7, #20]
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000100 	.word	0x20000100
 8003fcc:	20000104 	.word	0x20000104
 8003fd0:	200002a8 	.word	0x200002a8

08003fd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fcfe 	bl	80029ec <uxListRemove>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43da      	mvns	r2, r3
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4013      	ands	r3, r2
 800400a:	4a20      	ldr	r2, [pc, #128]	; (800408c <prvAddCurrentTaskToDelayedList+0xb8>)
 800400c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d10a      	bne.n	800402c <prvAddCurrentTaskToDelayedList+0x58>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	481a      	ldr	r0, [pc, #104]	; (8004090 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004026:	f7fe fc84 	bl	8002932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800402a:	e026      	b.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d209      	bcs.n	8004058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe fc92 	bl	800297a <vListInsert>
}
 8004056:	e010      	b.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fe fc88 	bl	800297a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <prvAddCurrentTaskToDelayedList+0xc8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d202      	bcs.n	800407a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200002a4 	.word	0x200002a4
 8004088:	20000100 	.word	0x20000100
 800408c:	200002a8 	.word	0x200002a8
 8004090:	2000028c 	.word	0x2000028c
 8004094:	2000025c 	.word	0x2000025c
 8004098:	20000258 	.word	0x20000258
 800409c:	200002c0 	.word	0x200002c0

080040a0 <Uint32ConvertHex>:
#endif

// reference

void Uint32ConvertHex(volatile StackType_t pStack, char *charTxScanTaskStack)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
    uint32_t remainder,quotient;
    int index = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]

    quotient = pStack;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61fb      	str	r3, [r7, #28]
    charTxScanTaskStack[index++] = 48; // ascii  number 0
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	61ba      	str	r2, [r7, #24]
 80040b8:	461a      	mov	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	2230      	movs	r2, #48	; 0x30
 80040c0:	701a      	strb	r2, [r3, #0]
    charTxScanTaskStack[index++] = 120; // ascii alphabet x
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	61ba      	str	r2, [r7, #24]
 80040c8:	461a      	mov	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	2278      	movs	r2, #120	; 0x78
 80040d0:	701a      	strb	r2, [r3, #0]
    while (quotient != 0)
 80040d2:	e020      	b.n	8004116 <Uint32ConvertHex+0x76>
    {
        remainder = quotient & 0xf; // quotient % 16
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	60fb      	str	r3, [r7, #12]
        if (remainder < 10)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b09      	cmp	r3, #9
 80040e0:	d80b      	bhi.n	80040fa <Uint32ConvertHex+0x5a>
            charTxScanTaskStack[index++] = '0' + remainder;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	61b9      	str	r1, [r7, #24]
 80040ec:	4619      	mov	r1, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	440b      	add	r3, r1
 80040f2:	3230      	adds	r2, #48	; 0x30
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e00a      	b.n	8004110 <Uint32ConvertHex+0x70>
       	else
            charTxScanTaskStack[index++] = 55 + remainder; // A = 65;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	1c59      	adds	r1, r3, #1
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	4619      	mov	r1, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	440b      	add	r3, r1
 800410a:	3237      	adds	r2, #55	; 0x37
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
            
        quotient = quotient >> 4; // quotient / 16
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	61fb      	str	r3, [r7, #28]
    while (quotient != 0)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1db      	bne.n	80040d4 <Uint32ConvertHex+0x34>
    }
    
    /* reverse */
    int end = index-1;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3b01      	subs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
    for(int reversal = 2;reversal <= end; ++reversal, --end)
 8004122:	2302      	movs	r3, #2
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e02f      	b.n	8004188 <Uint32ConvertHex+0xe8>
    { 
        charTxScanTaskStack[end] ^= charTxScanTaskStack[reversal];
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	4413      	add	r3, r2
 800412e:	7819      	ldrb	r1, [r3, #0]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4413      	add	r3, r2
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6838      	ldr	r0, [r7, #0]
 800413c:	4403      	add	r3, r0
 800413e:	404a      	eors	r2, r1
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[reversal] ^= charTxScanTaskStack[end];
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	4413      	add	r3, r2
 800414a:	7819      	ldrb	r1, [r3, #0]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	4413      	add	r3, r2
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	4403      	add	r3, r0
 800415a:	404a      	eors	r2, r1
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[end] ^= charTxScanTaskStack[reversal];
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	4413      	add	r3, r2
 8004166:	7819      	ldrb	r1, [r3, #0]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	4403      	add	r3, r0
 8004176:	404a      	eors	r2, r1
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
    for(int reversal = 2;reversal <= end; ++reversal, --end)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3301      	adds	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3b01      	subs	r3, #1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	429a      	cmp	r2, r3
 800418e:	ddcb      	ble.n	8004128 <Uint32ConvertHex+0x88>
    }
    charTxScanTaskStack[index++] = 0;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	61ba      	str	r2, [r7, #24]
 8004196:	461a      	mov	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4413      	add	r3, r2
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3724      	adds	r7, #36	; 0x24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LongConvertCharArray>:

void LongConvertCharArray(UBaseType_t TxScanTaskPriority, char *charTxScanTaskStack)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    uint32_t remainder,quotient;
    int index = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
    
    quotient = TxScanTaskPriority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61fb      	str	r3, [r7, #28]
    if(quotient == 0)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d124      	bne.n	800420e <LongConvertCharArray+0x62>
    	charTxScanTaskStack[index++] = '0';
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	61ba      	str	r2, [r7, #24]
 80041ca:	461a      	mov	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	2230      	movs	r2, #48	; 0x30
 80041d2:	701a      	strb	r2, [r3, #0]
    while (quotient != 0){
 80041d4:	e01b      	b.n	800420e <LongConvertCharArray+0x62>
       	remainder = quotient % 10;
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <LongConvertCharArray+0x100>)
 80041da:	fba3 1302 	umull	r1, r3, r3, r2
 80041de:	08d9      	lsrs	r1, r3, #3
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	60fb      	str	r3, [r7, #12]
       	charTxScanTaskStack[index++] = '0' + remainder;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	61b9      	str	r1, [r7, #24]
 80041f6:	4619      	mov	r1, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	440b      	add	r3, r1
 80041fc:	3230      	adds	r2, #48	; 0x30
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
        
       	quotient = quotient / 10;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4a29      	ldr	r2, [pc, #164]	; (80042ac <LongConvertCharArray+0x100>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	61fb      	str	r3, [r7, #28]
    while (quotient != 0){
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e0      	bne.n	80041d6 <LongConvertCharArray+0x2a>
    }

    /* reverse */
    if (index == 1) return;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d042      	beq.n	80042a0 <LongConvertCharArray+0xf4>

    int end = index-1;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	3b01      	subs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
    for(int reversal = 0; reversal <= end; ++reversal, --end)
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e02f      	b.n	8004286 <LongConvertCharArray+0xda>
    { 
        charTxScanTaskStack[end] ^= charTxScanTaskStack[reversal];
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	4413      	add	r3, r2
 800422c:	7819      	ldrb	r1, [r3, #0]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	4413      	add	r3, r2
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	6838      	ldr	r0, [r7, #0]
 800423a:	4403      	add	r3, r0
 800423c:	404a      	eors	r2, r1
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[reversal] ^= charTxScanTaskStack[end];
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4413      	add	r3, r2
 8004248:	7819      	ldrb	r1, [r3, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4413      	add	r3, r2
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	4403      	add	r3, r0
 8004258:	404a      	eors	r2, r1
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[end] ^= charTxScanTaskStack[reversal];
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	7819      	ldrb	r1, [r3, #0]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	4413      	add	r3, r2
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6838      	ldr	r0, [r7, #0]
 8004272:	4403      	add	r3, r0
 8004274:	404a      	eors	r2, r1
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
    for(int reversal = 0; reversal <= end; ++reversal, --end)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3301      	adds	r3, #1
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3b01      	subs	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	ddcb      	ble.n	8004226 <LongConvertCharArray+0x7a>
    }
    charTxScanTaskStack[index++] = 0;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	61ba      	str	r2, [r7, #24]
 8004294:	461a      	mov	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e000      	b.n	80042a2 <LongConvertCharArray+0xf6>
    if (index == 1) return;
 80042a0:	bf00      	nop
}
 80042a2:	3724      	adds	r7, #36	; 0x24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	cccccccd 	.word	0xcccccccd

080042b0 <PrintTCBContext>:



void PrintTCBContext(TCB_t *taskTCB, char taskState[])
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b0b2      	sub	sp, #200	; 0xc8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    /* get TCB contexts */
    char taskBasePriority[3];  memset(taskBasePriority,'\0',sizeof(taskBasePriority));
 80042ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042be:	2203      	movs	r2, #3
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f934 	bl	8005530 <memset>
    LongConvertCharArray(taskTCB->uxBasePriority, taskBasePriority);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff6a 	bl	80041ac <LongConvertCharArray>
    char taskPriority[3];      memset(taskPriority,'\0',sizeof(taskPriority));
 80042d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042dc:	2203      	movs	r2, #3
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f925 	bl	8005530 <memset>
    LongConvertCharArray(taskTCB->uxPriority, taskPriority);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff5b 	bl	80041ac <LongConvertCharArray>
    char taskStack[11];        memset(taskStack,'\0',sizeof(taskStack));
 80042f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042fa:	220b      	movs	r2, #11
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 f916 	bl	8005530 <memset>
    Uint32ConvertHex((StackType_t) taskTCB->pxStack, taskStack);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	461a      	mov	r2, r3
 800430a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7ff fec5 	bl	80040a0 <Uint32ConvertHex>
    char taskTOS[11];          memset(taskTOS,'\0',sizeof(taskTOS));
 8004316:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800431a:	220b      	movs	r2, #11
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f906 	bl	8005530 <memset>
    Uint32ConvertHex((StackType_t) taskTCB->pxTopOfStack, taskTOS);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f7ff feb5 	bl	80040a0 <Uint32ConvertHex>

    /* ouput TCB contexts */
    char Monitor[150];         memset(Monitor,'\0',sizeof(Monitor));
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	2296      	movs	r2, #150	; 0x96
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f001 f8f6 	bl	8005530 <memset>
    strcat(Monitor,taskTCB->pcTaskName);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f8f5 	bl	8005540 <strcat>
    int taskNamelen = strlen(taskTCB->pcTaskName);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3334      	adds	r3, #52	; 0x34
 800435a:	4618      	mov	r0, r3
 800435c:	f7fb ff38 	bl	80001d0 <strlen>
 8004360:	4603      	mov	r3, r0
 8004362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    for(int t = 0; t < (30-taskNamelen); ++t)
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800436c:	e013      	b.n	8004396 <PrintTCBContext+0xe6>
    	strcat(Monitor," ");
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	4618      	mov	r0, r3
 8004374:	f7fb ff2c 	bl	80001d0 <strlen>
 8004378:	4603      	mov	r3, r0
 800437a:	461a      	mov	r2, r3
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4413      	add	r3, r2
 8004382:	4949      	ldr	r1, [pc, #292]	; (80044a8 <PrintTCBContext+0x1f8>)
 8004384:	461a      	mov	r2, r3
 8004386:	460b      	mov	r3, r1
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	8013      	strh	r3, [r2, #0]
    for(int t = 0; t < (30-taskNamelen); ++t)
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004390:	3301      	adds	r3, #1
 8004392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800439a:	f1c3 031e 	rsb	r3, r3, #30
 800439e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043a2:	429a      	cmp	r2, r3
 80043a4:	dbe3      	blt.n	800436e <PrintTCBContext+0xbe>
    strcat(Monitor,taskBasePriority);	strcat(Monitor, "/");
 80043a6:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f8c5 	bl	8005540 <strcat>
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fb ff08 	bl	80001d0 <strlen>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	4413      	add	r3, r2
 80043ca:	4938      	ldr	r1, [pc, #224]	; (80044ac <PrintTCBContext+0x1fc>)
 80043cc:	461a      	mov	r2, r3
 80043ce:	460b      	mov	r3, r1
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	8013      	strh	r3, [r2, #0]
    strcat(Monitor,taskPriority);	strcat(Monitor,"			");
 80043d4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80043d8:	f107 0308 	add.w	r3, r7, #8
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f8ae 	bl	8005540 <strcat>
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fb fef1 	bl	80001d0 <strlen>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4413      	add	r3, r2
 80043f8:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <PrintTCBContext+0x200>)
 80043fa:	6810      	ldr	r0, [r2, #0]
 80043fc:	6018      	str	r0, [r3, #0]
    strcat(Monitor,taskStack);		strcat(Monitor,"	");
 80043fe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f001 f899 	bl	8005540 <strcat>
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4618      	mov	r0, r3
 8004414:	f7fb fedc 	bl	80001d0 <strlen>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	f107 0308 	add.w	r3, r7, #8
 8004420:	4413      	add	r3, r2
 8004422:	4924      	ldr	r1, [pc, #144]	; (80044b4 <PrintTCBContext+0x204>)
 8004424:	461a      	mov	r2, r3
 8004426:	460b      	mov	r3, r1
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	8013      	strh	r3, [r2, #0]
    strcat(Monitor,taskTOS);		strcat(Monitor,"	");
 800442c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f882 	bl	8005540 <strcat>
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	4618      	mov	r0, r3
 8004442:	f7fb fec5 	bl	80001d0 <strlen>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	4413      	add	r3, r2
 8004450:	4918      	ldr	r1, [pc, #96]	; (80044b4 <PrintTCBContext+0x204>)
 8004452:	461a      	mov	r2, r3
 8004454:	460b      	mov	r3, r1
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	8013      	strh	r3, [r2, #0]
    strcat(Monitor, taskState);	strcat(Monitor, "\n\r");
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f86d 	bl	8005540 <strcat>
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb feb0 	bl	80001d0 <strlen>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4413      	add	r3, r2
 800447a:	4a0f      	ldr	r2, [pc, #60]	; (80044b8 <PrintTCBContext+0x208>)
 800447c:	8811      	ldrh	r1, [r2, #0]
 800447e:	7892      	ldrb	r2, [r2, #2]
 8004480:	8019      	strh	r1, [r3, #0]
 8004482:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2,(uint8_t *)Monitor,strlen(Monitor),0xffff);
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	4618      	mov	r0, r3
 800448a:	f7fb fea1 	bl	80001d0 <strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	f107 0108 	add.w	r1, r7, #8
 8004496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800449a:	4808      	ldr	r0, [pc, #32]	; (80044bc <PrintTCBContext+0x20c>)
 800449c:	f7fd fea7 	bl	80021ee <HAL_UART_Transmit>
}
 80044a0:	bf00      	nop
 80044a2:	37c8      	adds	r7, #200	; 0xc8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	080055b4 	.word	0x080055b4
 80044ac:	080055b8 	.word	0x080055b8
 80044b0:	080055bc 	.word	0x080055bc
 80044b4:	080055c0 	.word	0x080055c0
 80044b8:	080055c4 	.word	0x080055c4
 80044bc:	2000002c 	.word	0x2000002c

080044c0 <Taskmonitor>:

void Taskmonitor(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b096      	sub	sp, #88	; 0x58
 80044c4:	af00      	add	r7, sp, #0
    /* output Title */
	char *str="Name                         |Piority (Base/Actual)    |pxStack	       |pxTopOfStack   |State	\n\r";;
 80044c6:	4b53      	ldr	r3, [pc, #332]	; (8004614 <Taskmonitor+0x154>)
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),0xffff);
 80044ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044cc:	f7fb fe80 	bl	80001d0 <strlen>
 80044d0:	4603      	mov	r3, r0
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044da:	484f      	ldr	r0, [pc, #316]	; (8004618 <Taskmonitor+0x158>)
 80044dc:	f7fd fe87 	bl	80021ee <HAL_UART_Transmit>

    /* traversal ReadyTaskLists */
    for (UBaseType_t i = 0; i < configMAX_PRIORITIES; ++i)
 80044e0:	2300      	movs	r3, #0
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
 80044e4:	e03d      	b.n	8004562 <Taskmonitor+0xa2>
    {
        if (listLIST_IS_EMPTY( &pxReadyTasksLists[i] ) == pdFALSE)
 80044e6:	494d      	ldr	r1, [pc, #308]	; (800461c <Taskmonitor+0x15c>)
 80044e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d030      	beq.n	800455c <Taskmonitor+0x9c>
        {
            ListItem_t *tasklist = listGET_ITEM_OF_HEAD_ENTRY( &pxReadyTasksLists[i] );
 80044fa:	4948      	ldr	r1, [pc, #288]	; (800461c <Taskmonitor+0x15c>)
 80044fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	330c      	adds	r3, #12
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
            UBaseType_t tasklistlen = listCURRENT_LIST_LENGTH( &pxReadyTasksLists[i] );
 800450e:	4943      	ldr	r1, [pc, #268]	; (800461c <Taskmonitor+0x15c>)
 8004510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	; 0x24

            for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 8004520:	2300      	movs	r3, #0
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	e016      	b.n	8004554 <Taskmonitor+0x94>
            {
                TCB_t *taskTCB = tasklist->pvOwner;
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	623b      	str	r3, [r7, #32]
                char taskState[6] = "Ready";
 800452c:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <Taskmonitor+0x160>)
 800452e:	f107 0318 	add.w	r3, r7, #24
 8004532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004536:	6018      	str	r0, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	8019      	strh	r1, [r3, #0]
                
                PrintTCBContext (taskTCB, taskState);
 800453c:	f107 0318 	add.w	r3, r7, #24
 8004540:	4619      	mov	r1, r3
 8004542:	6a38      	ldr	r0, [r7, #32]
 8004544:	f7ff feb4 	bl	80042b0 <PrintTCBContext>
            for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	653b      	str	r3, [r7, #80]	; 0x50
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	3301      	adds	r3, #1
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	429a      	cmp	r2, r3
 800455a:	d3e4      	bcc.n	8004526 <Taskmonitor+0x66>
    for (UBaseType_t i = 0; i < configMAX_PRIORITIES; ++i)
 800455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455e:	3301      	adds	r3, #1
 8004560:	657b      	str	r3, [r7, #84]	; 0x54
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	2b0e      	cmp	r3, #14
 8004566:	d9be      	bls.n	80044e6 <Taskmonitor+0x26>
            }
        }
    }

    /* traversal DelayedTaskList */
    if (listLIST_IS_EMPTY( &pxDelayedTaskList[0] ) == pdFALSE)
 8004568:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <Taskmonitor+0x164>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d024      	beq.n	80045bc <Taskmonitor+0xfc>
    {
        ListItem_t *tasklist = listGET_ITEM_OF_HEAD_ENTRY( &pxDelayedTaskList[0] );
 8004572:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <Taskmonitor+0x164>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
        UBaseType_t tasklistlen = listCURRENT_LIST_LENGTH( &pxDelayedTaskList[0] );
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <Taskmonitor+0x164>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	637b      	str	r3, [r7, #52]	; 0x34

        for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 8004582:	2300      	movs	r3, #0
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
 8004586:	e015      	b.n	80045b4 <Taskmonitor+0xf4>
        {
            TCB_t *taskTCB = tasklist->pvOwner;
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
            char taskState[8] = "Blocked";
 800458e:	4a26      	ldr	r2, [pc, #152]	; (8004628 <Taskmonitor+0x168>)
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004598:	e883 0003 	stmia.w	r3, {r0, r1}
            
            PrintTCBContext (taskTCB, taskState);
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	4619      	mov	r1, r3
 80045a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a4:	f7ff fe84 	bl	80042b0 <PrintTCBContext>
        for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b0:	3301      	adds	r3, #1
 80045b2:	647b      	str	r3, [r7, #68]	; 0x44
 80045b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3e5      	bcc.n	8004588 <Taskmonitor+0xc8>
        }
    }
	
	/* traversal pxOverflowDelayedTaskList */
	
	if (listLIST_IS_EMPTY( &pxOverflowDelayedTaskList[0] ) == pdFALSE)
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <Taskmonitor+0x16c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d021      	beq.n	800460a <Taskmonitor+0x14a>
    {
        ListItem_t *tasklist = listGET_ITEM_OF_HEAD_ENTRY( &pxOverflowDelayedTaskList[0] );
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <Taskmonitor+0x16c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
        UBaseType_t tasklistlen = listCURRENT_LIST_LENGTH( &pxOverflowDelayedTaskList[0] );
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <Taskmonitor+0x16c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 80045d6:	2300      	movs	r3, #0
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045da:	e012      	b.n	8004602 <Taskmonitor+0x142>
        {
            TCB_t *taskTCB = tasklist->pvOwner;
 80045dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
            char taskState[9] = "Overflow";
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <Taskmonitor+0x170>)
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80045e8:	c303      	stmia	r3!, {r0, r1}
 80045ea:	701a      	strb	r2, [r3, #0]
            
            PrintTCBContext (taskTCB, taskState);
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f7ff fe5d 	bl	80042b0 <PrintTCBContext>
        for (UBaseType_t j = 0; j < tasklistlen; tasklist = tasklist->pxNext, ++j)
 80045f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	643b      	str	r3, [r7, #64]	; 0x40
 80045fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fe:	3301      	adds	r3, #1
 8004600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	429a      	cmp	r2, r3
 8004608:	d3e8      	bcc.n	80045dc <Taskmonitor+0x11c>
        }
    }
	
}
 800460a:	bf00      	nop
 800460c:	3758      	adds	r7, #88	; 0x58
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	080055c8 	.word	0x080055c8
 8004618:	2000002c 	.word	0x2000002c
 800461c:	20000104 	.word	0x20000104
 8004620:	0800562c 	.word	0x0800562c
 8004624:	20000258 	.word	0x20000258
 8004628:	08005634 	.word	0x08005634
 800462c:	2000025c 	.word	0x2000025c
 8004630:	0800563c 	.word	0x0800563c

08004634 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800463e:	f000 fad5 	bl	8004bec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <xTimerCreateTimerTask+0x54>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <xTimerCreateTimerTask+0x58>)
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	2302      	movs	r3, #2
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004658:	490d      	ldr	r1, [pc, #52]	; (8004690 <xTimerCreateTimerTask+0x5c>)
 800465a:	480e      	ldr	r0, [pc, #56]	; (8004694 <xTimerCreateTimerTask+0x60>)
 800465c:	f7fe fe9c 	bl	8003398 <xTaskCreate>
 8004660:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	603b      	str	r3, [r7, #0]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800467e:	687b      	ldr	r3, [r7, #4]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200002fc 	.word	0x200002fc
 800468c:	20000300 	.word	0x20000300
 8004690:	08005648 	.word	0x08005648
 8004694:	080047cd 	.word	0x080047cd

08004698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <xTimerGenericCommand+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02a      	beq.n	8004724 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	dc18      	bgt.n	8004712 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e0:	f7ff fbd4 	bl	8003e8c <xTaskGetSchedulerState>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d109      	bne.n	80046fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <xTimerGenericCommand+0x98>)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f107 0114 	add.w	r1, r7, #20
 80046f2:	2300      	movs	r3, #0
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	f7fe fa6b 	bl	8002bd0 <xQueueGenericSend>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24
 80046fc:	e012      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <xTimerGenericCommand+0x98>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f107 0114 	add.w	r1, r7, #20
 8004706:	2300      	movs	r3, #0
 8004708:	2200      	movs	r2, #0
 800470a:	f7fe fa61 	bl	8002bd0 <xQueueGenericSend>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
 8004710:	e008      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <xTimerGenericCommand+0x98>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f107 0114 	add.w	r1, r7, #20
 800471a:	2300      	movs	r3, #0
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	f7fe fb55 	bl	8002dcc <xQueueGenericSendFromISR>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004726:	4618      	mov	r0, r3
 8004728:	3728      	adds	r7, #40	; 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	200002fc 	.word	0x200002fc

08004734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <prvProcessExpiredTimer+0x94>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe f94d 	bl	80029ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d022      	beq.n	80047a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	18d1      	adds	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f000 f8d1 	bl	8004914 <prvInsertTimerInActiveList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01f      	beq.n	80047b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	2100      	movs	r1, #0
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f7ff ff88 	bl	8004698 <xTimerGenericCommand>
 8004788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d113      	bne.n	80047b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	4798      	blx	r3
}
 80047c0:	bf00      	nop
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200002f4 	.word	0x200002f4

080047cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f857 	bl	800488c <prvGetNextExpireTime>
 80047de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f803 	bl	80047f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ea:	f000 f8d5 	bl	8004998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ee:	e7f1      	b.n	80047d4 <prvTimerTask+0x8>

080047f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047fa:	f7fe ff8d 	bl	8003718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f866 	bl	80048d4 <prvSampleTimeNow>
 8004808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d130      	bne.n	8004872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <prvProcessTimerOrBlockTask+0x3c>
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	d806      	bhi.n	800482c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800481e:	f7fe ff89 	bl	8003734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff85 	bl	8004734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800482a:	e024      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvProcessTimerOrBlockTask+0x90>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <prvProcessTimerOrBlockTask+0x50>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <prvProcessTimerOrBlockTask+0x52>
 8004840:	2300      	movs	r3, #0
 8004842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvProcessTimerOrBlockTask+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe fd6d 	bl	8003330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004856:	f7fe ff6d 	bl	8003734 <xTaskResumeAll>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <prvProcessTimerOrBlockTask+0x98>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
}
 8004870:	e001      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004872:	f7fe ff5f 	bl	8003734 <xTaskResumeAll>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200002f8 	.word	0x200002f8
 8004884:	200002fc 	.word	0x200002fc
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <prvGetNextExpireTime+0x44>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <prvGetNextExpireTime+0x16>
 800489e:	2201      	movs	r2, #1
 80048a0:	e000      	b.n	80048a4 <prvGetNextExpireTime+0x18>
 80048a2:	2200      	movs	r2, #0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <prvGetNextExpireTime+0x44>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e001      	b.n	80048c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	200002f4 	.word	0x200002f4

080048d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048dc:	f7fe ffc6 	bl	800386c <xTaskGetTickCount>
 80048e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvSampleTimeNow+0x3c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d205      	bcs.n	80048f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048ec:	f000 f91a 	bl	8004b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e002      	b.n	80048fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <prvSampleTimeNow+0x3c>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000304 	.word	0x20000304

08004914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d812      	bhi.n	8004960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e01b      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <prvInsertTimerInActiveList+0x7c>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f80e 	bl	800297a <vListInsert>
 800495e:	e012      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d206      	bcs.n	8004976 <prvInsertTimerInActiveList+0x62>
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e007      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <prvInsertTimerInActiveList+0x80>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fd fffa 	bl	800297a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200002f8 	.word	0x200002f8
 8004994:	200002f4 	.word	0x200002f4

08004998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800499e:	e0ae      	b.n	8004afe <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f2c0 80aa 	blt.w	8004afc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe f817 	bl	80029ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff87 	bl	80048d4 <prvSampleTimeNow>
 80049c6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	f200 8097 	bhi.w	8004afe <prvProcessReceivedCommands+0x166>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <prvProcessReceivedCommands+0x40>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a75 	.word	0x08004a75
 80049e8:	08004a89 	.word	0x08004a89
 80049ec:	08004ad3 	.word	0x08004ad3
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a01 	.word	0x08004a01
 80049f8:	08004a75 	.word	0x08004a75
 80049fc:	08004a89 	.word	0x08004a89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	18d1      	adds	r1, r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a20:	f7ff ff78 	bl	8004914 <prvInsertTimerInActiveList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d069      	beq.n	8004afe <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d05e      	beq.n	8004afe <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	441a      	add	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a52:	f7ff fe21 	bl	8004698 <xTimerGenericCommand>
 8004a56:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d14f      	bne.n	8004afe <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	61bb      	str	r3, [r7, #24]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a86:	e03a      	b.n	8004afe <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	617b      	str	r3, [r7, #20]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	18d1      	adds	r1, r2, r3
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004acc:	f7ff ff22 	bl	8004914 <prvInsertTimerInActiveList>
					break;
 8004ad0:	e015      	b.n	8004afe <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae2:	f000 fbdd 	bl	80052a0 <vPortFree>
 8004ae6:	e00a      	b.n	8004afe <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004afa:	e000      	b.n	8004afe <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004afc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <prvProcessReceivedCommands+0x188>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f107 0108 	add.w	r1, r7, #8
 8004b06:	2200      	movs	r2, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe f9f7 	bl	8002efc <xQueueReceive>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f af45 	bne.w	80049a0 <prvProcessReceivedCommands+0x8>
	}
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	3728      	adds	r7, #40	; 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	200002fc 	.word	0x200002fc

08004b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b2a:	e048      	b.n	8004bbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd ff51 	bl	80029ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02e      	beq.n	8004bbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d90e      	bls.n	8004b90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b7e:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fd fef6 	bl	800297a <vListInsert>
 8004b8e:	e016      	b.n	8004bbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b90:	2300      	movs	r3, #0
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff fd7c 	bl	8004698 <xTimerGenericCommand>
 8004ba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	603b      	str	r3, [r7, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1b1      	bne.n	8004b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <prvSwitchTimerLists+0xc4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvSwitchTimerLists+0xc4>)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200002f4 	.word	0x200002f4
 8004be8:	200002f8 	.word	0x200002f8

08004bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bf0:	f000 f970 	bl	8004ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11d      	bne.n	8004c38 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bfc:	4811      	ldr	r0, [pc, #68]	; (8004c44 <prvCheckForValidListAndQueue+0x58>)
 8004bfe:	f7fd fe6b 	bl	80028d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c02:	4811      	ldr	r0, [pc, #68]	; (8004c48 <prvCheckForValidListAndQueue+0x5c>)
 8004c04:	f7fd fe68 	bl	80028d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <prvCheckForValidListAndQueue+0x58>)
 8004c0c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <prvCheckForValidListAndQueue+0x64>)
 8004c10:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <prvCheckForValidListAndQueue+0x5c>)
 8004c12:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c14:	2200      	movs	r2, #0
 8004c16:	210c      	movs	r1, #12
 8004c18:	200a      	movs	r0, #10
 8004c1a:	f7fd ff79 	bl	8002b10 <xQueueGenericCreate>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4908      	ldr	r1, [pc, #32]	; (8004c54 <prvCheckForValidListAndQueue+0x68>)
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fb52 	bl	80032dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c38:	f000 f97c 	bl	8004f34 <vPortExitCritical>
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200002fc 	.word	0x200002fc
 8004c44:	200002cc 	.word	0x200002cc
 8004c48:	200002e0 	.word	0x200002e0
 8004c4c:	200002f4 	.word	0x200002f4
 8004c50:	200002f8 	.word	0x200002f8
 8004c54:	08005650 	.word	0x08005650

08004c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b04      	subs	r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b04      	subs	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b04      	subs	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <pxPortInitialiseStack+0x64>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b14      	subs	r3, #20
 8004c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f06f 0202 	mvn.w	r2, #2
 8004ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b20      	subs	r3, #32
 8004cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	08004cc1 	.word	0x08004cc1

08004cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <prvTaskExitError+0x54>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d00a      	beq.n	8004cea <prvTaskExitError+0x2a>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <prvTaskExitError+0x28>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	60bb      	str	r3, [r7, #8]
}
 8004cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cfe:	bf00      	nop
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0fc      	beq.n	8004d00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	2000000c 	.word	0x2000000c
	...

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	20000100 	.word	0x20000100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d48:	4808      	ldr	r0, [pc, #32]	; (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed08 	.word	0xe000ed08

08004d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d76:	4b4e      	ldr	r3, [pc, #312]	; (8004eb0 <xPortStartScheduler+0x140>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4e      	ldr	r2, [pc, #312]	; (8004eb4 <xPortStartScheduler+0x144>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10a      	bne.n	8004d96 <xPortStartScheduler+0x26>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	61bb      	str	r3, [r7, #24]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d96:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <xPortStartScheduler+0x140>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a47      	ldr	r2, [pc, #284]	; (8004eb8 <xPortStartScheduler+0x148>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10a      	bne.n	8004db6 <xPortStartScheduler+0x46>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	617b      	str	r3, [r7, #20]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004db6:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <xPortStartScheduler+0x14c>)
 8004db8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	22ff      	movs	r2, #255	; 0xff
 8004dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <xPortStartScheduler+0x150>)
 8004ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de4:	e009      	b.n	8004dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d0ef      	beq.n	8004de6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1c3 0307 	rsb	r3, r3, #7
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d00a      	beq.n	8004e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	613b      	str	r3, [r7, #16]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1c3 0307 	rsb	r3, r3, #7
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00a      	beq.n	8004e4a <xPortStartScheduler+0xda>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5c:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <xPortStartScheduler+0x154>)
 8004e5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e68:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <xPortStartScheduler+0x158>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <xPortStartScheduler+0x158>)
 8004e6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <xPortStartScheduler+0x158>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <xPortStartScheduler+0x158>)
 8004e7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e80:	f000 f8dc 	bl	800503c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <xPortStartScheduler+0x15c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e8a:	f000 f8fb 	bl	8005084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <xPortStartScheduler+0x160>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <xPortStartScheduler+0x160>)
 8004e94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e9a:	f7ff ff55 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e9e:	f7fe fdad 	bl	80039fc <vTaskSwitchContext>
	prvTaskExitError();
 8004ea2:	f7ff ff0d 	bl	8004cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	410fc271 	.word	0x410fc271
 8004eb8:	410fc270 	.word	0x410fc270
 8004ebc:	e000e400 	.word	0xe000e400
 8004ec0:	20000308 	.word	0x20000308
 8004ec4:	2000030c 	.word	0x2000030c
 8004ec8:	e000ed20 	.word	0xe000ed20
 8004ecc:	2000000c 	.word	0x2000000c
 8004ed0:	e000ef34 	.word	0xe000ef34

08004ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
}
 8004eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <vPortEnterCritical+0x58>)
 8004ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <vPortEnterCritical+0x58>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10f      	bne.n	8004f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortEnterCritical+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	603b      	str	r3, [r7, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <vPortEnterCritical+0x4a>
	}
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	2000000c 	.word	0x2000000c
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <vPortExitCritical+0x50>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <vPortExitCritical+0x24>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <vPortExitCritical+0x50>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <vPortExitCritical+0x50>)
 8004f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <vPortExitCritical+0x50>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <vPortExitCritical+0x42>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f383 8811 	msr	BASEPRI, r3
}
 8004f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000000c 	.word	0x2000000c
	...

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f01e 0f10 	tst.w	lr, #16
 8004fa0:	bf08      	it	eq
 8004fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fb4:	f380 8811 	msr	BASEPRI, r0
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f7fe fd1c 	bl	80039fc <vTaskSwitchContext>
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f380 8811 	msr	BASEPRI, r0
 8004fcc:	bc09      	pop	{r0, r3}
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	f01e 0f10 	tst.w	lr, #16
 8004fda:	bf08      	it	eq
 8004fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fe0:	f380 8809 	msr	PSP, r0
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	20000100 	.word	0x20000100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7fe fc3b 	bl	800388c <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <SysTick_Handler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortSetupTimerInterrupt+0x38>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <vPortSetupTimerInterrupt+0x3c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <vPortSetupTimerInterrupt+0x40>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vPortSetupTimerInterrupt+0x44>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e010 	.word	0xe000e010
 8005074:	e000e018 	.word	0xe000e018
 8005078:	20000000 	.word	0x20000000
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	e000e014 	.word	0xe000e014

08005084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005094 <vPortEnableVFP+0x10>
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005092:	bf00      	nop
 8005094:	e000ed88 	.word	0xe000ed88

08005098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d914      	bls.n	80050d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <vPortValidateInterruptPriority+0x70>)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <vPortValidateInterruptPriority+0x74>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	7afa      	ldrb	r2, [r7, #11]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d20a      	bcs.n	80050d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <vPortValidateInterruptPriority+0x78>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <vPortValidateInterruptPriority+0x7c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d90a      	bls.n	80050fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	603b      	str	r3, [r7, #0]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <vPortValidateInterruptPriority+0x60>
	}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000e3f0 	.word	0xe000e3f0
 800510c:	20000308 	.word	0x20000308
 8005110:	e000ed0c 	.word	0xe000ed0c
 8005114:	2000030c 	.word	0x2000030c

08005118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005124:	f7fe faf8 	bl	8003718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005128:	4b58      	ldr	r3, [pc, #352]	; (800528c <pvPortMalloc+0x174>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005130:	f000 f910 	bl	8005354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005134:	4b56      	ldr	r3, [pc, #344]	; (8005290 <pvPortMalloc+0x178>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 808e 	bne.w	800525e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01d      	beq.n	8005184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <pvPortMalloc+0x6c>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d069      	beq.n	800525e <pvPortMalloc+0x146>
 800518a:	4b42      	ldr	r3, [pc, #264]	; (8005294 <pvPortMalloc+0x17c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d864      	bhi.n	800525e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005194:	4b40      	ldr	r3, [pc, #256]	; (8005298 <pvPortMalloc+0x180>)
 8005196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519e:	e004      	b.n	80051aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <pvPortMalloc+0xa4>
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f1      	bne.n	80051a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051bc:	4b33      	ldr	r3, [pc, #204]	; (800528c <pvPortMalloc+0x174>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d04b      	beq.n	800525e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2308      	movs	r3, #8
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d91f      	bls.n	8005228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <pvPortMalloc+0xf8>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	613b      	str	r3, [r7, #16]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f000 f8f8 	bl	8005418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005228:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <pvPortMalloc+0x17c>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <pvPortMalloc+0x17c>)
 8005234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005236:	4b17      	ldr	r3, [pc, #92]	; (8005294 <pvPortMalloc+0x17c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <pvPortMalloc+0x184>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d203      	bcs.n	800524a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <pvPortMalloc+0x17c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <pvPortMalloc+0x184>)
 8005248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <pvPortMalloc+0x178>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	431a      	orrs	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800525e:	f7fe fa69 	bl	8003734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <pvPortMalloc+0x16a>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <pvPortMalloc+0x168>
	return pvReturn;
 8005282:	69fb      	ldr	r3, [r7, #28]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20012f18 	.word	0x20012f18
 8005290:	20012f24 	.word	0x20012f24
 8005294:	20012f1c 	.word	0x20012f1c
 8005298:	20012f10 	.word	0x20012f10
 800529c:	20012f20 	.word	0x20012f20

080052a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d048      	beq.n	8005344 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052b2:	2308      	movs	r3, #8
 80052b4:	425b      	negs	r3, r3
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <vPortFree+0xac>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <vPortFree+0x44>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60fb      	str	r3, [r7, #12]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <vPortFree+0x62>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60bb      	str	r3, [r7, #8]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b11      	ldr	r3, [pc, #68]	; (800534c <vPortFree+0xac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d115      	bne.n	8005344 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <vPortFree+0xac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005328:	f7fe f9f6 	bl	8003718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <vPortFree+0xb0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4413      	add	r3, r2
 8005336:	4a06      	ldr	r2, [pc, #24]	; (8005350 <vPortFree+0xb0>)
 8005338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f000 f86c 	bl	8005418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005340:	f7fe f9f8 	bl	8003734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005344:	bf00      	nop
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20012f24 	.word	0x20012f24
 8005350:	20012f1c 	.word	0x20012f1c

08005354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800535a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800535e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005360:	4b27      	ldr	r3, [pc, #156]	; (8005400 <prvHeapInit+0xac>)
 8005362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00c      	beq.n	8005388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3307      	adds	r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <prvHeapInit+0xac>)
 8005384:	4413      	add	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <prvHeapInit+0xb0>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <prvHeapInit+0xb0>)
 8005394:	2200      	movs	r2, #0
 8005396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053a0:	2208      	movs	r2, #8
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <prvHeapInit+0xb4>)
 80053b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <prvHeapInit+0xb4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <prvHeapInit+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <prvHeapInit+0xb4>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <prvHeapInit+0xb8>)
 80053e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <prvHeapInit+0xbc>)
 80053ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <prvHeapInit+0xc0>)
 80053ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20000310 	.word	0x20000310
 8005404:	20012f10 	.word	0x20012f10
 8005408:	20012f18 	.word	0x20012f18
 800540c:	20012f20 	.word	0x20012f20
 8005410:	20012f1c 	.word	0x20012f1c
 8005414:	20012f24 	.word	0x20012f24

08005418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <prvInsertBlockIntoFreeList+0xac>)
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e002      	b.n	800542c <prvInsertBlockIntoFreeList+0x14>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d8f7      	bhi.n	8005426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4413      	add	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	429a      	cmp	r2, r3
 8005446:	d108      	bne.n	800545a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	441a      	add	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d118      	bne.n	80054a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d00d      	beq.n	8005496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	e008      	b.n	80054a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e003      	b.n	80054a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d002      	beq.n	80054b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20012f10 	.word	0x20012f10
 80054c8:	20012f18 	.word	0x20012f18

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4d0d      	ldr	r5, [pc, #52]	; (8005504 <__libc_init_array+0x38>)
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d2:	1b64      	subs	r4, r4, r5
 80054d4:	10a4      	asrs	r4, r4, #2
 80054d6:	2600      	movs	r6, #0
 80054d8:	42a6      	cmp	r6, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	4d0b      	ldr	r5, [pc, #44]	; (800550c <__libc_init_array+0x40>)
 80054de:	4c0c      	ldr	r4, [pc, #48]	; (8005510 <__libc_init_array+0x44>)
 80054e0:	f000 f83e 	bl	8005560 <_init>
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	2600      	movs	r6, #0
 80054ea:	42a6      	cmp	r6, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f4:	4798      	blx	r3
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fe:	4798      	blx	r3
 8005500:	3601      	adds	r6, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	08005678 	.word	0x08005678
 8005508:	08005678 	.word	0x08005678
 800550c:	08005678 	.word	0x08005678
 8005510:	0800567c 	.word	0x0800567c

08005514 <memcpy>:
 8005514:	440a      	add	r2, r1
 8005516:	4291      	cmp	r1, r2
 8005518:	f100 33ff 	add.w	r3, r0, #4294967295
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	4770      	bx	lr
 8005520:	b510      	push	{r4, lr}
 8005522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552a:	4291      	cmp	r1, r2
 800552c:	d1f9      	bne.n	8005522 <memcpy+0xe>
 800552e:	bd10      	pop	{r4, pc}

08005530 <memset>:
 8005530:	4402      	add	r2, r0
 8005532:	4603      	mov	r3, r0
 8005534:	4293      	cmp	r3, r2
 8005536:	d100      	bne.n	800553a <memset+0xa>
 8005538:	4770      	bx	lr
 800553a:	f803 1b01 	strb.w	r1, [r3], #1
 800553e:	e7f9      	b.n	8005534 <memset+0x4>

08005540 <strcat>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4602      	mov	r2, r0
 8005544:	7814      	ldrb	r4, [r2, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	3201      	adds	r2, #1
 800554a:	2c00      	cmp	r4, #0
 800554c:	d1fa      	bne.n	8005544 <strcat+0x4>
 800554e:	3b01      	subs	r3, #1
 8005550:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005554:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005558:	2a00      	cmp	r2, #0
 800555a:	d1f9      	bne.n	8005550 <strcat+0x10>
 800555c:	bd10      	pop	{r4, pc}
	...

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
